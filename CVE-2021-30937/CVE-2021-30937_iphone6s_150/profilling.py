#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
find_common_kallocs_separate.py

파일들에서 kallocated address (type: KHEAP_DATA_BUFFERS) 와
kallocated address (type: KHEAP_DEFAULT) 각각에 대해
'모든 입력 파일에 공통으로 등장하는 주소'만 추출하여
별도 파일로 저장하고 콘솔에 요약을 출력합니다.

Usage:
    python3 find_common_kallocs_separate.py [-o OUTDIR] file1 file2 ...

Outputs (default OUTDIR = current directory):
    common_KHEAP_DATA_BUFFERS.txt
    common_KHEAP_DEFAULT.txt
"""
import sys
import re
import os
import argparse
from collections import defaultdict

PAT = re.compile(
    r'kallocated address\s*\(type:\s*(KHEAP_[A-Z0-9_]+)\)\s*=\s*(0x[0-9a-fA-F]+)',
    re.IGNORECASE
)

def collect_addresses_from_file(path):
    d = defaultdict(set)
    try:
        with open(path, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                m = PAT.search(line)
                if m:
                    ktype = m.group(1).upper()
                    addr = m.group(2).lower()
                    d[ktype].add(addr)
    except FileNotFoundError:
        print(f"[경고] 파일을 찾을 수 없음: {path}", file=sys.stderr)
    return d

def main():
    ap = argparse.ArgumentParser(description="Find common kallocated addresses per heap type.")
    ap.add_argument('files', nargs='+', help='Input text files to search')
    ap.add_argument('-o', '--outdir', default='.', help='Output directory (default: current dir)')
    args = ap.parse_args()

    paths = args.files
    outdir = args.outdir
    os.makedirs(outdir, exist_ok=True)

    per_file = []
    for p in paths:
        per_file.append(collect_addresses_from_file(p))

    targets = ("KHEAP_DATA_BUFFERS", "KHEAP_DEFAULT")
    results = {}

    for t in targets:
        sets = [d.get(t, set()) for d in per_file]
        if not sets:
            common = set()
        else:
            # 빈 셋이 하나라도 있으면 교집합은 빈셋
            common = set.intersection(*sets) if sets else set()
        results[t] = common

        outpath = os.path.join(outdir, f"common_{t}.txt")
        with open(outpath, 'w', encoding='utf-8') as of:
            if common:
                for addr in sorted(common):
                    of.write(addr + '\n')
            else:
                of.write('')  # 빈 파일을 만듭니다.
        print(f"[결과] {t}: {len(common)}개 주소 (파일: {outpath})")

    print("\n요약:")
    for t in targets:
        if results[t]:
            print(f" - {t}:")
            for a in sorted(results[t]):
                print(f"    {a}")
        else:
            print(f" - {t}: 모든 파일에 공통으로 존재하는 주소가 없습니다.")

if __name__ == "__main__":
    main()
