#include <mach/mach.h>
#include <inttypes.h>
#include <CoreFoundation/CoreFoundation.h>

// extern const mach_port_t kIOMasterPortDefault;
// #define IO_OBJECT_NULL (0)
// typedef mach_port_t io_service_t;
// typedef mach_port_t io_connect_t;
// typedef mach_port_t    io_object_t;
// typedef io_object_t    io_registry_entry_t;
// typedef char        io_name_t[128];
// typedef char             io_struct_inband_t[4096];
// io_service_t
// IOServiceGetMatchingService(
//                             mach_port_t  _masterPort,
//                             CFDictionaryRef  matching);

// CFMutableDictionaryRef
// IOServiceMatching(
//                   const char* name);

// kern_return_t
// IOServiceOpen(
//               io_service_t  service,
//               task_port_t   owningTask,
//               uint32_t      type,
//               io_connect_t* connect );

// io_service_t
// IOServiceGetMatchingService(
//                             mach_port_t  _masterPort,
//                             CFDictionaryRef  matching);

// CFMutableDictionaryRef
// IOServiceMatching(
//                   const char* name);

// kern_return_t
// IORegistryEntrySetCFProperties(
//                                io_registry_entry_t    entry,
//                                CFTypeRef         properties );
// kern_return_t
// IORegistryEntryGetProperty(
//                            io_registry_entry_t    entry,
//                            const io_name_t        propertyName,
//                            io_struct_inband_t    buffer,
//                            uint32_t          * size );
// io_registry_entry_t IORegistryEntryFromPath(
//                                 mach_port_t port,
//                                 char *path );
// kern_return_t IOObjectRelease(io_object_t object);

// uint64_t IOConnectTrap6(io_connect_t, uint32_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);

uint64_t kexecute(uint64_t addr, uint64_t x0, uint64_t x1, uint64_t x2, uint64_t x3, uint64_t x4, uint64_t x5, uint64_t x6);
void init_kexecute(void);
void term_kexecute(void);

uint64_t kvtophys(uint64_t kva);
uint64_t physread64(uint64_t pa);