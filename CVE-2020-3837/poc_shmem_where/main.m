#include <stdio.h>

#include "print.h"
#include "ioaccel.h"

#include "helper/kexecute.h"
#include "helper/krw.h"
#include "helper/offsets.h"
#include "helper/find_shmem.h"

extern mach_port_t tfp0;

int main(int argc, char *argv[], char *envp[]) {
	IOAccelerator_init();

	struct IOAccelDeviceShmemData cmdbuf, seglist;
	uint64_t command_buffer_shmem_sig = 0x4142434445464748;
	uint64_t segment_list_shmem_sig = 0x5152535455565758;

	//create two cmdbuf, seglist's 0x4000 shmem and set signature to find shmem kva
	kern_return_t ret = alloc_shmem_with_sig(0x4000, &cmdbuf, &seglist, command_buffer_shmem_sig, segment_list_shmem_sig);
	INFO("alloc_shmem ret: 0x%x (%s)\n", ret, mach_error_string(ret));

	// tfp0 / kbase / kcall setup
	offsets_init();
	init_tfp0(); 
	INFO("tfp0: 0x%" PRIx32 "\n", tfp0);

	int r = get_kbase(&kbase);
    INFO("get_kbase ret: %d, kbase: 0x%llx, kslide: 0x%llx\n", r, kbase, kslide);

	init_kexecute();

	uint64_t command_buffer_shmem_data_kva, segment_list_shmem_data_kva = 0;
	find_shmem_in_kernel(&command_buffer_shmem_data_kva, &segment_list_shmem_data_kva, command_buffer_shmem_sig, segment_list_shmem_sig);
	INFO("command_buffer_shmem_data_kva: 0x%llx\n", command_buffer_shmem_data_kva);
	INFO("segment_list_shmem_data_kva: 0x%llx\n", segment_list_shmem_data_kva);

	getchar();

	uint64_t bruh = command_buffer_shmem_data_kva;
	find_shmem_in_kernel_2(bruh);

	term_kexecute();

	IOAccelerator_deinit();
    return 0;
}
