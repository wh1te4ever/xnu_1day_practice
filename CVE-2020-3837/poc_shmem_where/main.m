#include <stdio.h>

#include "print.h"
#include "ioaccel.h"

#include "helper/kexecute.h"
#include "helper/krw.h"
#include "helper/offsets.h"
#include "helper/find_shmem.h"
#include "helper/kutils.h"
#include "helper/translations.h"
#include "helper/pte.h"

extern mach_port_t tfp0;

int main(int argc, char *argv[], char *envp[]) {
	IOAccelerator_init();

	struct IOAccelDeviceShmemData cmdbuf, seglist;
	uint64_t command_buffer_shmem_sig = 0x4142434445464748;
	uint64_t segment_list_shmem_sig = 0x5152535455565758;

	//create two cmdbuf, seglist's 0x4000 shmem and set signature to find shmem kva
	kern_return_t ret = alloc_shmem_with_sig(0x78000, &cmdbuf, &seglist, command_buffer_shmem_sig, segment_list_shmem_sig);
	INFO("alloc_shmem ret: 0x%x (%s)\n", ret, mach_error_string(ret));

	// *(uint64_t*)(cmdbuf.data + 0x2000) = 0x6161616161616161;

	// tfp0 / kbase / kcall setup
	offsets_init();
	init_tfp0(); 
	INFO("tfp0: 0x%" PRIx32 "\n", tfp0);

	int r = get_kbase(&kbase);
    INFO("get_kbase ret: %d, kbase: 0x%llx, kslide: 0x%llx\n", r, kbase, kslide);

	init_kexecute();

	uint64_t command_buffer_shmem_data_kva, segment_list_shmem_data_kva = 0;
	INFO("find_shmem_in_kernel Solution 1\n");
	find_shmem_in_kernel(&command_buffer_shmem_data_kva, &segment_list_shmem_data_kva, command_buffer_shmem_sig, segment_list_shmem_sig);
	INFO("command_buffer_shmem_data_kva: 0x%llx\n", command_buffer_shmem_data_kva);
	INFO("segment_list_shmem_data_kva: 0x%llx\n", segment_list_shmem_data_kva);
	puts("\n\n");

	INFO("find_shmem_in_kernel Solution 2\n");
	find_shmem_in_kernel_2(&command_buffer_shmem_data_kva, &segment_list_shmem_data_kva, command_buffer_shmem_sig, segment_list_shmem_sig);
	INFO("command_buffer_shmem_data_kva: 0x%llx -> pa: 0x%llx\n", command_buffer_shmem_data_kva, kvtophys(command_buffer_shmem_data_kva));
	INFO("segment_list_shmem_data_kva: 0x%llx -> pa: 0x%llx\n", segment_list_shmem_data_kva, kvtophys(segment_list_shmem_data_kva));
	puts("\n\n");


	INFO("find_shmem_in_kernel Solution 3\n");
	translation_init();
	find_shmem_in_kernel_3(&command_buffer_shmem_data_kva, &segment_list_shmem_data_kva, (uint64_t)cmdbuf.data, (uint64_t)seglist.data, command_buffer_shmem_sig, segment_list_shmem_sig);
	INFO("command_buffer_shmem_data_kva: 0x%llx -> pa: 0x%llx\n", command_buffer_shmem_data_kva, kvtophys(command_buffer_shmem_data_kva));
	INFO("segment_list_shmem_data_kva: 0x%llx -> pa: 0x%llx\n", segment_list_shmem_data_kva, kvtophys(segment_list_shmem_data_kva));
	puts("\n\n");

	INFO("find_shmem_in_kernel Solution 4\n");
	find_shmem_in_kernel_4(&command_buffer_shmem_data_kva, &segment_list_shmem_data_kva, command_buffer_shmem_sig, segment_list_shmem_sig);
	// INFO("command_buffer_shmem_data_kva: 0x%llx -> pa: 0x%llx\n", command_buffer_shmem_data_kva, kvtophys(command_buffer_shmem_data_kva));
	// INFO("segment_list_shmem_data_kva: 0x%llx -> pa: 0x%llx\n", segment_list_shmem_data_kva, kvtophys(segment_list_shmem_data_kva));


	// uint64_t our_task = task_self_addr();
	// uint64_t our_pmap = get_task_pmap(our_task);
	// INFO("our_pmap = 0x%llx, cmdbuf.data = 0x%llx\n", our_pmap, cmdbuf.data);

	// uint64_t our_ttep = kread64(our_pmap + off_pmap_ttep);
    // printf("our_ttep = 0x%llx\n", our_ttep);

	// uint64_t leafLevel = PMAP_TT_L3_LEVEL;
	// uint64_t pa = vtophys_lvl(our_ttep, (uint64_t)(cmdbuf.data), &leafLevel, NULL);
	// printf("[+] ua = 0x%llx -> pa = 0x%llx\n", (uint64_t)(cmdbuf.data), pa);

	// uint64_t kva = phystokv(pa);
	// printf("[+] kva = 0x%llx -> pa: 0x%llx\n", kva, kvtophys(kva));
	
	// if(kvtophys(kva)) khexdump(kva+0x1000, 0x10);
	// khexdump(command_buffer_shmem_data_kva+0x1000, 0x10);

	// *(uint64_t*)(cmdbuf.data + 0x1000) = 0x6161616161616161;

	// if(kvtophys(kva)) khexdump(kva+0x1000, 0x10);
	// khexdump(command_buffer_shmem_data_kva+0x1000, 0x10);

	// uint32_t what = pmap_find_phys(our_pmap, (uint32_t)(cmdbuf.data));
	// INFO("what = 0x%lx\n", what);

	term_kexecute();

	IOAccelerator_deinit();
    return 0;
}
