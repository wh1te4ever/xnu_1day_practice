#include <stdio.h>

#include "helper.h"
#include "ioaccel.h"

#include "helper/kexecute.h"
#include "helper/krw.h"
#include "helper/offsets.h"

extern mach_port_t tfp0;

int main(int argc, char *argv[], char *envp[]) {
	IOAccelerator_init();

	struct IOAccelDeviceShmemData cmdbuf, seglist;
	kern_return_t ret = alloc_shmem(0x4000, &cmdbuf, &seglist, true);
	INFO("alloc_shmem ret: 0x%x (%s)\n", ret, mach_error_string(ret));

	// tfp0 / kbase / kcall setup
	offsets_init();
	init_tfp0(); 
	INFO("tfp0: 0x%" PRIx32 "\n", tfp0);

	int r = get_kbase(&kbase);
    INFO("get_kbase ret: %d, kbase: 0x%llx, kslide: 0x%llx\n", r, kbase, kslide);

	init_kexecute();

	// let's find where shmem allocated in kernel
	uint64_t gIOKitPageableSpace_start = kread64(ksym(KSYMBOL_gIOKitPageableSpace) + 0x10);
	uint64_t gIOKitPageableSpace_end = kread64(ksym(KSYMBOL_gIOKitPageableSpace) + 0x18);

	int i = 0;
	uint64_t command_buffer_shmem_data_kva, segment_list_shmem_data_kva = 0;

	while(1) {
		uint64_t current_kva = gIOKitPageableSpace_start + i * 0x1000;

		if(current_kva > gIOKitPageableSpace_end) {
			ERROR("failed to find where shmem allocated in kernel\n");
			break;
		}

		//check if valid readable kernel address to prevent kernel panic
		uint64_t current_pa = kvtophys(current_kva);
		if(current_pa == 0) continue;

		if(physread64(current_pa) == 0x4142434445464748) {
			INFO("Found command_buffer_shmem in kernel: 0x%llx\n", current_kva-0x1000);
			command_buffer_shmem_data_kva = current_kva-0x1000;
		}

		if(physread64(current_pa) == 0x5152535455565758) {
			INFO("Found segment_list_shmem in kernel: 0x%llx\n", current_kva-0x1000);
			segment_list_shmem_data_kva = current_kva-0x1000;
		}

		if(segment_list_shmem_data_kva && command_buffer_shmem_data_kva) break;

		i++;
	}

	

	term_kexecute();




	IOAccelerator_deinit();
    return 0;
}
