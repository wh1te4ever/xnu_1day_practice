#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <mach/mach.h>
#include <IOKit/IOKitLib.h>
#include "exp.h"

extern const mach_port_t kIOMasterPortDefault;
uint32_t IOSurface_id;
mach_port_t IOSurfaceRootUserClient;
struct _IOSurfaceFastCreateArgs {
    uint64_t address;
    uint32_t width;
    uint32_t height;
    uint32_t pixel_format;
    uint32_t bytes_per_element;
    uint32_t bytes_per_row;
    uint32_t alloc_size;
};
struct IOSurfaceLockResult {
    uint64_t addr1;
    uint64_t addr2;
    uint64_t addr3;
    uint32_t surface_id;
    uint8_t _pad2[0xdd0-0x18-0x4];
};

static bool IOSurface_initialized;

mach_port_t IOSurfaceRoot;

#define ERROR(str, ...) printf("[-] "str, ##__VA_ARGS__)
#define INFO(str, ...) printf("[*] "str, ##__VA_ARGS__)

bool
IOSurface_init() {
	if (IOSurface_initialized) {
		return true;
	}
	IOSurfaceRoot = IOServiceGetMatchingService(
			kIOMasterPortDefault,
			IOServiceMatching("IOSurfaceRoot"));
	if (IOSurfaceRoot == MACH_PORT_NULL) {
		ERROR("could not find %s", "IOSurfaceRoot");
		return false;
	}
	kern_return_t kr = IOServiceOpen(
			IOSurfaceRoot,
			mach_task_self(),
			0,
			&IOSurfaceRootUserClient);
	if (kr != KERN_SUCCESS) {
		ERROR("could not open %s", "IOSurfaceRootUserClient");
		return false;
	}
    INFO("Got IOSurfaceRootUserClient port=0x%x\n", IOSurfaceRootUserClient);
	struct _IOSurfaceFastCreateArgs create_args = { .alloc_size = 0x4000, };
	struct IOSurfaceLockResult lock_result;
    
    uint32_t create_outsize;
	size_t lock_result_size = 0xdd0;
	kr = IOConnectCallMethod(
			IOSurfaceRootUserClient,
			6, // create_surface_client_fast_path
			NULL, 0,
			&create_args, sizeof(create_args),
			NULL, NULL,
			&lock_result, &lock_result_size);
	if (kr != KERN_SUCCESS) {
		ERROR("could not create %s: 0x%x\n", "IOSurfaceClient", kr);
		return false;
	}
	IOSurface_id = lock_result.surface_id;
    if (!IOSurface_id) {
        IOSurface_id = (uint32_t)lock_result.addr3;
    }
	IOSurface_initialized = true;
	return true;
}

int main(int argc, char *argv[], char *envp[]) {
    printf("hello, World!\n");

    IOSurface_init();

    return 0;
}